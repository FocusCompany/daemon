// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FocusEnvelope.proto

#ifndef PROTOBUF_FocusEnvelope_2eproto__INCLUDED
#define PROTOBUF_FocusEnvelope_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_FocusEnvelope_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsFocusEnveloppeImpl();
void InitDefaultsFocusEnveloppe();
inline void InitDefaults() {
  InitDefaultsFocusEnveloppe();
}
}  // namespace protobuf_FocusEnvelope_2eproto
class FocusEnveloppe;
class FocusEnveloppeDefaultTypeInternal;
extern FocusEnveloppeDefaultTypeInternal _FocusEnveloppe_default_instance_;

// ===================================================================

class FocusEnveloppe : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:FocusEnveloppe) */ {
 public:
  FocusEnveloppe();
  virtual ~FocusEnveloppe();

  FocusEnveloppe(const FocusEnveloppe& from);

  inline FocusEnveloppe& operator=(const FocusEnveloppe& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FocusEnveloppe(FocusEnveloppe&& from) noexcept
    : FocusEnveloppe() {
    *this = ::std::move(from);
  }

  inline FocusEnveloppe& operator=(FocusEnveloppe&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FocusEnveloppe& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FocusEnveloppe* internal_default_instance() {
    return reinterpret_cast<const FocusEnveloppe*>(
               &_FocusEnveloppe_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FocusEnveloppe* other);
  friend void swap(FocusEnveloppe& a, FocusEnveloppe& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FocusEnveloppe* New() const PROTOBUF_FINAL { return New(NULL); }

  FocusEnveloppe* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const FocusEnveloppe& from);
  void MergeFrom(const FocusEnveloppe& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(FocusEnveloppe* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ClientID = 1;
  void clear_clientid();
  static const int kClientIDFieldNumber = 1;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientid(::std::string&& value);
  #endif
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // string PayloadType = 2;
  void clear_payloadtype();
  static const int kPayloadTypeFieldNumber = 2;
  const ::std::string& payloadtype() const;
  void set_payloadtype(const ::std::string& value);
  #if LANG_CXX11
  void set_payloadtype(::std::string&& value);
  #endif
  void set_payloadtype(const char* value);
  void set_payloadtype(const char* value, size_t size);
  ::std::string* mutable_payloadtype();
  ::std::string* release_payloadtype();
  void set_allocated_payloadtype(::std::string* payloadtype);

  // .google.protobuf.Any Payload = 3;
  bool has_payload() const;
  void clear_payload();
  static const int kPayloadFieldNumber = 3;
  const ::google::protobuf::Any& payload() const;
  ::google::protobuf::Any* release_payload();
  ::google::protobuf::Any* mutable_payload();
  void set_allocated_payload(::google::protobuf::Any* payload);

  // @@protoc_insertion_point(class_scope:FocusEnveloppe)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr payloadtype_;
  ::google::protobuf::Any* payload_;
  mutable int _cached_size_;
  friend struct ::protobuf_FocusEnvelope_2eproto::TableStruct;
  friend void ::protobuf_FocusEnvelope_2eproto::InitDefaultsFocusEnveloppeImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FocusEnveloppe

// string ClientID = 1;
inline void FocusEnveloppe::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FocusEnveloppe::clientid() const {
  // @@protoc_insertion_point(field_get:FocusEnveloppe.ClientID)
  return clientid_.GetNoArena();
}
inline void FocusEnveloppe::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FocusEnveloppe.ClientID)
}
#if LANG_CXX11
inline void FocusEnveloppe::set_clientid(::std::string&& value) {
  
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FocusEnveloppe.ClientID)
}
#endif
inline void FocusEnveloppe::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FocusEnveloppe.ClientID)
}
inline void FocusEnveloppe::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FocusEnveloppe.ClientID)
}
inline ::std::string* FocusEnveloppe::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:FocusEnveloppe.ClientID)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FocusEnveloppe::release_clientid() {
  // @@protoc_insertion_point(field_release:FocusEnveloppe.ClientID)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FocusEnveloppe::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:FocusEnveloppe.ClientID)
}

// string PayloadType = 2;
inline void FocusEnveloppe::clear_payloadtype() {
  payloadtype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FocusEnveloppe::payloadtype() const {
  // @@protoc_insertion_point(field_get:FocusEnveloppe.PayloadType)
  return payloadtype_.GetNoArena();
}
inline void FocusEnveloppe::set_payloadtype(const ::std::string& value) {
  
  payloadtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:FocusEnveloppe.PayloadType)
}
#if LANG_CXX11
inline void FocusEnveloppe::set_payloadtype(::std::string&& value) {
  
  payloadtype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:FocusEnveloppe.PayloadType)
}
#endif
inline void FocusEnveloppe::set_payloadtype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  payloadtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:FocusEnveloppe.PayloadType)
}
inline void FocusEnveloppe::set_payloadtype(const char* value, size_t size) {
  
  payloadtype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:FocusEnveloppe.PayloadType)
}
inline ::std::string* FocusEnveloppe::mutable_payloadtype() {
  
  // @@protoc_insertion_point(field_mutable:FocusEnveloppe.PayloadType)
  return payloadtype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FocusEnveloppe::release_payloadtype() {
  // @@protoc_insertion_point(field_release:FocusEnveloppe.PayloadType)
  
  return payloadtype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FocusEnveloppe::set_allocated_payloadtype(::std::string* payloadtype) {
  if (payloadtype != NULL) {
    
  } else {
    
  }
  payloadtype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payloadtype);
  // @@protoc_insertion_point(field_set_allocated:FocusEnveloppe.PayloadType)
}

// .google.protobuf.Any Payload = 3;
inline bool FocusEnveloppe::has_payload() const {
  return this != internal_default_instance() && payload_ != NULL;
}
inline const ::google::protobuf::Any& FocusEnveloppe::payload() const {
  const ::google::protobuf::Any* p = payload_;
  // @@protoc_insertion_point(field_get:FocusEnveloppe.Payload)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Any*>(
      &::google::protobuf::_Any_default_instance_);
}
inline ::google::protobuf::Any* FocusEnveloppe::release_payload() {
  // @@protoc_insertion_point(field_release:FocusEnveloppe.Payload)
  
  ::google::protobuf::Any* temp = payload_;
  payload_ = NULL;
  return temp;
}
inline ::google::protobuf::Any* FocusEnveloppe::mutable_payload() {
  
  if (payload_ == NULL) {
    payload_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:FocusEnveloppe.Payload)
  return payload_;
}
inline void FocusEnveloppe::set_allocated_payload(::google::protobuf::Any* payload) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(payload_);
  }
  if (payload) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      payload = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:FocusEnveloppe.Payload)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FocusEnvelope_2eproto__INCLUDED
