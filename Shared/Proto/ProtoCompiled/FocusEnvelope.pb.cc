// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FocusEnvelope.proto

#include "FocusEnvelope.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace Focus {
class EnvelopeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Envelope>
      _instance;
} _Envelope_default_instance_;
}  // namespace Focus
namespace protobuf_FocusEnvelope_2eproto {
void InitDefaultsEnvelopeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_FocusEvent_2eproto::InitDefaultsEvent();
  {
    void* ptr = &::Focus::_Envelope_default_instance_;
    new (ptr) ::Focus::Envelope();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Focus::Envelope::InitAsDefaultInstance();
}

void InitDefaultsEnvelope() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsEnvelopeImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Focus::Envelope, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Focus::Envelope, clientid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Focus::Envelope, events_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Focus::Envelope)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Focus::_Envelope_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "FocusEnvelope.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023FocusEnvelope.proto\022\005Focus\032\020FocusEvent"
      ".proto\":\n\010Envelope\022\020\n\010clientID\030\001 \001(\t\022\034\n\006"
      "events\030\002 \003(\0132\014.Focus.Eventb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 114);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FocusEnvelope.proto", &protobuf_RegisterTypes);
  ::protobuf_FocusEvent_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_FocusEnvelope_2eproto
namespace Focus {

// ===================================================================

void Envelope::InitAsDefaultInstance() {
}
void Envelope::clear_events() {
  events_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Envelope::kClientIDFieldNumber;
const int Envelope::kEventsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Envelope::Envelope()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_FocusEnvelope_2eproto::InitDefaultsEnvelope();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Focus.Envelope)
}
Envelope::Envelope(const Envelope& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      events_(from.events_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.clientid().size() > 0) {
    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
  // @@protoc_insertion_point(copy_constructor:Focus.Envelope)
}

void Envelope::SharedCtor() {
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Envelope::~Envelope() {
  // @@protoc_insertion_point(destructor:Focus.Envelope)
  SharedDtor();
}

void Envelope::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Envelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Envelope::descriptor() {
  ::protobuf_FocusEnvelope_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FocusEnvelope_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Envelope& Envelope::default_instance() {
  ::protobuf_FocusEnvelope_2eproto::InitDefaultsEnvelope();
  return *internal_default_instance();
}

Envelope* Envelope::New(::google::protobuf::Arena* arena) const {
  Envelope* n = new Envelope;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Envelope::Clear() {
// @@protoc_insertion_point(message_clear_start:Focus.Envelope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  events_.Clear();
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Envelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Focus.Envelope)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string clientID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clientid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->clientid().data(), static_cast<int>(this->clientid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "Focus.Envelope.clientID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .Focus.Event events = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_events()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Focus.Envelope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Focus.Envelope)
  return false;
#undef DO_
}

void Envelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Focus.Envelope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientID = 1;
  if (this->clientid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientid().data(), static_cast<int>(this->clientid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Focus.Envelope.clientID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->clientid(), output);
  }

  // repeated .Focus.Event events = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->events(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Focus.Envelope)
}

::google::protobuf::uint8* Envelope::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Focus.Envelope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string clientID = 1;
  if (this->clientid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->clientid().data(), static_cast<int>(this->clientid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "Focus.Envelope.clientID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->clientid(), target);
  }

  // repeated .Focus.Event events = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->events_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->events(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Focus.Envelope)
  return target;
}

size_t Envelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Focus.Envelope)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .Focus.Event events = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->events_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->events(static_cast<int>(i)));
    }
  }

  // string clientID = 1;
  if (this->clientid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->clientid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Envelope::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Focus.Envelope)
  GOOGLE_DCHECK_NE(&from, this);
  const Envelope* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Envelope>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Focus.Envelope)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Focus.Envelope)
    MergeFrom(*source);
  }
}

void Envelope::MergeFrom(const Envelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Focus.Envelope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  events_.MergeFrom(from.events_);
  if (from.clientid().size() > 0) {

    clientid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.clientid_);
  }
}

void Envelope::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Focus.Envelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Envelope::CopyFrom(const Envelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Focus.Envelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Envelope::IsInitialized() const {
  return true;
}

void Envelope::Swap(Envelope* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Envelope::InternalSwap(Envelope* other) {
  using std::swap;
  events_.InternalSwap(&other->events_);
  clientid_.Swap(&other->clientid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Envelope::GetMetadata() const {
  protobuf_FocusEnvelope_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FocusEnvelope_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Focus

// @@protoc_insertion_point(global_scope)
