// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FocusMouseEventPayload.proto

#include "FocusMouseEventPayload.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace Focus {
class MouseEventPayloadDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MouseEventPayload>
      _instance;
} _MouseEventPayload_default_instance_;
}  // namespace Focus
namespace protobuf_FocusMouseEventPayload_2eproto {
void InitDefaultsMouseEventPayloadImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::Focus::_MouseEventPayload_default_instance_;
    new (ptr) ::Focus::MouseEventPayload();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Focus::MouseEventPayload::InitAsDefaultInstance();
}

void InitDefaultsMouseEventPayload() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMouseEventPayloadImpl);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Focus::MouseEventPayload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Focus::MouseEventPayload, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Focus::MouseEventPayload, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::Focus::MouseEventPayload, y_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Focus::MouseEventPayload)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Focus::_MouseEventPayload_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "FocusMouseEventPayload.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\034FocusMouseEventPayload.proto\022\005Focus\"\322\001"
      "\n\021MouseEventPayload\0225\n\004type\030\001 \001(\0162\'.Focu"
      "s.MouseEventPayload.MouseEventType\022\t\n\001X\030"
      "\002 \001(\r\022\t\n\001Y\030\003 \001(\r\"p\n\016MouseEventType\022\022\n\016R_"
      "BUTTON_CLICK\020\000\022\022\n\016L_BUTTON_CLICK\020\001\022\017\n\013M_"
      "BUTTON_UP\020\002\022\021\n\rM_BUTTON_DOWN\020\003\022\022\n\016M_BUTT"
      "ON_CLICK\020\004b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 258);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FocusMouseEventPayload.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_FocusMouseEventPayload_2eproto
namespace Focus {
const ::google::protobuf::EnumDescriptor* MouseEventPayload_MouseEventType_descriptor() {
  protobuf_FocusMouseEventPayload_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FocusMouseEventPayload_2eproto::file_level_enum_descriptors[0];
}
bool MouseEventPayload_MouseEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MouseEventPayload_MouseEventType MouseEventPayload::R_BUTTON_CLICK;
const MouseEventPayload_MouseEventType MouseEventPayload::L_BUTTON_CLICK;
const MouseEventPayload_MouseEventType MouseEventPayload::M_BUTTON_UP;
const MouseEventPayload_MouseEventType MouseEventPayload::M_BUTTON_DOWN;
const MouseEventPayload_MouseEventType MouseEventPayload::M_BUTTON_CLICK;
const MouseEventPayload_MouseEventType MouseEventPayload::MouseEventType_MIN;
const MouseEventPayload_MouseEventType MouseEventPayload::MouseEventType_MAX;
const int MouseEventPayload::MouseEventType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void MouseEventPayload::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MouseEventPayload::kTypeFieldNumber;
const int MouseEventPayload::kXFieldNumber;
const int MouseEventPayload::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MouseEventPayload::MouseEventPayload()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_FocusMouseEventPayload_2eproto::InitDefaultsMouseEventPayload();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Focus.MouseEventPayload)
}
MouseEventPayload::MouseEventPayload(const MouseEventPayload& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&type_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Focus.MouseEventPayload)
}

void MouseEventPayload::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&type_)) + sizeof(y_));
  _cached_size_ = 0;
}

MouseEventPayload::~MouseEventPayload() {
  // @@protoc_insertion_point(destructor:Focus.MouseEventPayload)
  SharedDtor();
}

void MouseEventPayload::SharedDtor() {
}

void MouseEventPayload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MouseEventPayload::descriptor() {
  ::protobuf_FocusMouseEventPayload_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FocusMouseEventPayload_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MouseEventPayload& MouseEventPayload::default_instance() {
  ::protobuf_FocusMouseEventPayload_2eproto::InitDefaultsMouseEventPayload();
  return *internal_default_instance();
}

MouseEventPayload* MouseEventPayload::New(::google::protobuf::Arena* arena) const {
  MouseEventPayload* n = new MouseEventPayload;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MouseEventPayload::Clear() {
// @@protoc_insertion_point(message_clear_start:Focus.MouseEventPayload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&type_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool MouseEventPayload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Focus.MouseEventPayload)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .Focus.MouseEventPayload.MouseEventType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::Focus::MouseEventPayload_MouseEventType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 X = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 Y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Focus.MouseEventPayload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Focus.MouseEventPayload)
  return false;
#undef DO_
}

void MouseEventPayload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Focus.MouseEventPayload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Focus.MouseEventPayload.MouseEventType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // uint32 X = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->x(), output);
  }

  // uint32 Y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:Focus.MouseEventPayload)
}

::google::protobuf::uint8* MouseEventPayload::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Focus.MouseEventPayload)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Focus.MouseEventPayload.MouseEventType type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // uint32 X = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->x(), target);
  }

  // uint32 Y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Focus.MouseEventPayload)
  return target;
}

size_t MouseEventPayload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Focus.MouseEventPayload)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .Focus.MouseEventPayload.MouseEventType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // uint32 X = 2;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->x());
  }

  // uint32 Y = 3;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MouseEventPayload::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Focus.MouseEventPayload)
  GOOGLE_DCHECK_NE(&from, this);
  const MouseEventPayload* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MouseEventPayload>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Focus.MouseEventPayload)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Focus.MouseEventPayload)
    MergeFrom(*source);
  }
}

void MouseEventPayload::MergeFrom(const MouseEventPayload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Focus.MouseEventPayload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void MouseEventPayload::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Focus.MouseEventPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MouseEventPayload::CopyFrom(const MouseEventPayload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Focus.MouseEventPayload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MouseEventPayload::IsInitialized() const {
  return true;
}

void MouseEventPayload::Swap(MouseEventPayload* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MouseEventPayload::InternalSwap(MouseEventPayload* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MouseEventPayload::GetMetadata() const {
  protobuf_FocusMouseEventPayload_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_FocusMouseEventPayload_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Focus

// @@protoc_insertion_point(global_scope)
