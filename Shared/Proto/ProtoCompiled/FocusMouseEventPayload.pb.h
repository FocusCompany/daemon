// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FocusMouseEventPayload.proto

#ifndef PROTOBUF_FocusMouseEventPayload_2eproto__INCLUDED
#define PROTOBUF_FocusMouseEventPayload_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_FocusMouseEventPayload_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsMouseEventPayloadImpl();
void InitDefaultsMouseEventPayload();
inline void InitDefaults() {
  InitDefaultsMouseEventPayload();
}
}  // namespace protobuf_FocusMouseEventPayload_2eproto
namespace Focus {
class MouseEventPayload;
class MouseEventPayloadDefaultTypeInternal;
extern MouseEventPayloadDefaultTypeInternal _MouseEventPayload_default_instance_;
}  // namespace Focus
namespace Focus {

enum MouseEventPayload_MouseEventType {
  MouseEventPayload_MouseEventType_R_BUTTON_CLICK = 0,
  MouseEventPayload_MouseEventType_L_BUTTON_CLICK = 1,
  MouseEventPayload_MouseEventType_M_BUTTON_UP = 2,
  MouseEventPayload_MouseEventType_M_BUTTON_DOWN = 3,
  MouseEventPayload_MouseEventType_M_BUTTON_CLICK = 4,
  MouseEventPayload_MouseEventType_MouseEventPayload_MouseEventType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MouseEventPayload_MouseEventType_MouseEventPayload_MouseEventType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MouseEventPayload_MouseEventType_IsValid(int value);
const MouseEventPayload_MouseEventType MouseEventPayload_MouseEventType_MouseEventType_MIN = MouseEventPayload_MouseEventType_R_BUTTON_CLICK;
const MouseEventPayload_MouseEventType MouseEventPayload_MouseEventType_MouseEventType_MAX = MouseEventPayload_MouseEventType_M_BUTTON_CLICK;
const int MouseEventPayload_MouseEventType_MouseEventType_ARRAYSIZE = MouseEventPayload_MouseEventType_MouseEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MouseEventPayload_MouseEventType_descriptor();
inline const ::std::string& MouseEventPayload_MouseEventType_Name(MouseEventPayload_MouseEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MouseEventPayload_MouseEventType_descriptor(), value);
}
inline bool MouseEventPayload_MouseEventType_Parse(
    const ::std::string& name, MouseEventPayload_MouseEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MouseEventPayload_MouseEventType>(
    MouseEventPayload_MouseEventType_descriptor(), name, value);
}
// ===================================================================

class MouseEventPayload : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Focus.MouseEventPayload) */ {
 public:
  MouseEventPayload();
  virtual ~MouseEventPayload();

  MouseEventPayload(const MouseEventPayload& from);

  inline MouseEventPayload& operator=(const MouseEventPayload& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MouseEventPayload(MouseEventPayload&& from) noexcept
    : MouseEventPayload() {
    *this = ::std::move(from);
  }

  inline MouseEventPayload& operator=(MouseEventPayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MouseEventPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MouseEventPayload* internal_default_instance() {
    return reinterpret_cast<const MouseEventPayload*>(
               &_MouseEventPayload_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MouseEventPayload* other);
  friend void swap(MouseEventPayload& a, MouseEventPayload& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MouseEventPayload* New() const PROTOBUF_FINAL { return New(NULL); }

  MouseEventPayload* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MouseEventPayload& from);
  void MergeFrom(const MouseEventPayload& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MouseEventPayload* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MouseEventPayload_MouseEventType MouseEventType;
  static const MouseEventType R_BUTTON_CLICK =
    MouseEventPayload_MouseEventType_R_BUTTON_CLICK;
  static const MouseEventType L_BUTTON_CLICK =
    MouseEventPayload_MouseEventType_L_BUTTON_CLICK;
  static const MouseEventType M_BUTTON_UP =
    MouseEventPayload_MouseEventType_M_BUTTON_UP;
  static const MouseEventType M_BUTTON_DOWN =
    MouseEventPayload_MouseEventType_M_BUTTON_DOWN;
  static const MouseEventType M_BUTTON_CLICK =
    MouseEventPayload_MouseEventType_M_BUTTON_CLICK;
  static inline bool MouseEventType_IsValid(int value) {
    return MouseEventPayload_MouseEventType_IsValid(value);
  }
  static const MouseEventType MouseEventType_MIN =
    MouseEventPayload_MouseEventType_MouseEventType_MIN;
  static const MouseEventType MouseEventType_MAX =
    MouseEventPayload_MouseEventType_MouseEventType_MAX;
  static const int MouseEventType_ARRAYSIZE =
    MouseEventPayload_MouseEventType_MouseEventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MouseEventType_descriptor() {
    return MouseEventPayload_MouseEventType_descriptor();
  }
  static inline const ::std::string& MouseEventType_Name(MouseEventType value) {
    return MouseEventPayload_MouseEventType_Name(value);
  }
  static inline bool MouseEventType_Parse(const ::std::string& name,
      MouseEventType* value) {
    return MouseEventPayload_MouseEventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .Focus.MouseEventPayload.MouseEventType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Focus::MouseEventPayload_MouseEventType type() const;
  void set_type(::Focus::MouseEventPayload_MouseEventType value);

  // uint32 X = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::uint32 x() const;
  void set_x(::google::protobuf::uint32 value);

  // uint32 Y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::uint32 y() const;
  void set_y(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Focus.MouseEventPayload)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  mutable int _cached_size_;
  friend struct ::protobuf_FocusMouseEventPayload_2eproto::TableStruct;
  friend void ::protobuf_FocusMouseEventPayload_2eproto::InitDefaultsMouseEventPayloadImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MouseEventPayload

// .Focus.MouseEventPayload.MouseEventType type = 1;
inline void MouseEventPayload::clear_type() {
  type_ = 0;
}
inline ::Focus::MouseEventPayload_MouseEventType MouseEventPayload::type() const {
  // @@protoc_insertion_point(field_get:Focus.MouseEventPayload.type)
  return static_cast< ::Focus::MouseEventPayload_MouseEventType >(type_);
}
inline void MouseEventPayload::set_type(::Focus::MouseEventPayload_MouseEventType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:Focus.MouseEventPayload.type)
}

// uint32 X = 2;
inline void MouseEventPayload::clear_x() {
  x_ = 0u;
}
inline ::google::protobuf::uint32 MouseEventPayload::x() const {
  // @@protoc_insertion_point(field_get:Focus.MouseEventPayload.X)
  return x_;
}
inline void MouseEventPayload::set_x(::google::protobuf::uint32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:Focus.MouseEventPayload.X)
}

// uint32 Y = 3;
inline void MouseEventPayload::clear_y() {
  y_ = 0u;
}
inline ::google::protobuf::uint32 MouseEventPayload::y() const {
  // @@protoc_insertion_point(field_get:Focus.MouseEventPayload.Y)
  return y_;
}
inline void MouseEventPayload::set_y(::google::protobuf::uint32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:Focus.MouseEventPayload.Y)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Focus

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Focus::MouseEventPayload_MouseEventType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Focus::MouseEventPayload_MouseEventType>() {
  return ::Focus::MouseEventPayload_MouseEventType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FocusMouseEventPayload_2eproto__INCLUDED
