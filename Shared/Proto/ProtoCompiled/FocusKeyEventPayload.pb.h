// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FocusKeyEventPayload.proto

#ifndef PROTOBUF_FocusKeyEventPayload_2eproto__INCLUDED
#define PROTOBUF_FocusKeyEventPayload_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_FocusKeyEventPayload_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsKeyEventPayloadImpl();
void InitDefaultsKeyEventPayload();
inline void InitDefaults() {
  InitDefaultsKeyEventPayload();
}
}  // namespace protobuf_FocusKeyEventPayload_2eproto
namespace Focus {
class KeyEventPayload;
class KeyEventPayloadDefaultTypeInternal;
extern KeyEventPayloadDefaultTypeInternal _KeyEventPayload_default_instance_;
}  // namespace Focus
namespace Focus {

// ===================================================================

class KeyEventPayload : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Focus.KeyEventPayload) */ {
 public:
  KeyEventPayload();
  virtual ~KeyEventPayload();

  KeyEventPayload(const KeyEventPayload& from);

  inline KeyEventPayload& operator=(const KeyEventPayload& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KeyEventPayload(KeyEventPayload&& from) noexcept
    : KeyEventPayload() {
    *this = ::std::move(from);
  }

  inline KeyEventPayload& operator=(KeyEventPayload&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyEventPayload& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KeyEventPayload* internal_default_instance() {
    return reinterpret_cast<const KeyEventPayload*>(
               &_KeyEventPayload_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(KeyEventPayload* other);
  friend void swap(KeyEventPayload& a, KeyEventPayload& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KeyEventPayload* New() const PROTOBUF_FINAL { return New(NULL); }

  KeyEventPayload* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KeyEventPayload& from);
  void MergeFrom(const KeyEventPayload& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KeyEventPayload* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes PlainTextKeylog = 1;
  void clear_plaintextkeylog();
  static const int kPlainTextKeylogFieldNumber = 1;
  const ::std::string& plaintextkeylog() const;
  void set_plaintextkeylog(const ::std::string& value);
  #if LANG_CXX11
  void set_plaintextkeylog(::std::string&& value);
  #endif
  void set_plaintextkeylog(const char* value);
  void set_plaintextkeylog(const void* value, size_t size);
  ::std::string* mutable_plaintextkeylog();
  ::std::string* release_plaintextkeylog();
  void set_allocated_plaintextkeylog(::std::string* plaintextkeylog);

  // @@protoc_insertion_point(class_scope:Focus.KeyEventPayload)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr plaintextkeylog_;
  mutable int _cached_size_;
  friend struct ::protobuf_FocusKeyEventPayload_2eproto::TableStruct;
  friend void ::protobuf_FocusKeyEventPayload_2eproto::InitDefaultsKeyEventPayloadImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// KeyEventPayload

// bytes PlainTextKeylog = 1;
inline void KeyEventPayload::clear_plaintextkeylog() {
  plaintextkeylog_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KeyEventPayload::plaintextkeylog() const {
  // @@protoc_insertion_point(field_get:Focus.KeyEventPayload.PlainTextKeylog)
  return plaintextkeylog_.GetNoArena();
}
inline void KeyEventPayload::set_plaintextkeylog(const ::std::string& value) {
  
  plaintextkeylog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Focus.KeyEventPayload.PlainTextKeylog)
}
#if LANG_CXX11
inline void KeyEventPayload::set_plaintextkeylog(::std::string&& value) {
  
  plaintextkeylog_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Focus.KeyEventPayload.PlainTextKeylog)
}
#endif
inline void KeyEventPayload::set_plaintextkeylog(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  plaintextkeylog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Focus.KeyEventPayload.PlainTextKeylog)
}
inline void KeyEventPayload::set_plaintextkeylog(const void* value, size_t size) {
  
  plaintextkeylog_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Focus.KeyEventPayload.PlainTextKeylog)
}
inline ::std::string* KeyEventPayload::mutable_plaintextkeylog() {
  
  // @@protoc_insertion_point(field_mutable:Focus.KeyEventPayload.PlainTextKeylog)
  return plaintextkeylog_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KeyEventPayload::release_plaintextkeylog() {
  // @@protoc_insertion_point(field_release:Focus.KeyEventPayload.PlainTextKeylog)
  
  return plaintextkeylog_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KeyEventPayload::set_allocated_plaintextkeylog(::std::string* plaintextkeylog) {
  if (plaintextkeylog != NULL) {
    
  } else {
    
  }
  plaintextkeylog_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), plaintextkeylog);
  // @@protoc_insertion_point(field_set_allocated:Focus.KeyEventPayload.PlainTextKeylog)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Focus

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FocusKeyEventPayload_2eproto__INCLUDED
